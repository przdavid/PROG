package exercise2;

/**
 * Clase que representa a los objetos de tipo Fracción.
 * @author David Pérez Ruiz
 * Fecha: 20/01/2021
 * 
 * El formato de la clase es: Fraction(numerator, denominator).
 * @param numerator: numerador de la clase Fraction.
 * @param denominator: denominador de la clase Fraction.
 */

public class Fraction {
  // Atributos
  int numerator;
  int denominator;
  
  // Constructor
  Fraction(int n, int d) {
    this.numerator = n;
    this.denominator = d;
  }
  
  // Getters y setters
  /**
   * @return the numerator
   */
  public int getNumerator() {
    return numerator;
  }

  /**
   * @param numerator the numerator to set
   */
  public void setNumerator(int numerator) {
    this.numerator = numerator;
  }

  /**
   * @return the denominator
   */
  public int getDenominator() {
    return denominator;
  }

  /**
   * @param denominator the denominator to set
   */
  public void setDenominator(int denominator) {
    // Impedir que el denominador valga 0
    assert denominator != 0;
    
    this.denominator = denominator;
  }
  
  // Métodos
  //Ejercicio 2.b) Obtener la fracción como cadena de caracteres
  /**
   * Método: toString
   * Propósito: Devuelve la fracción como una cadena de caracteres.
   */
  public String toString() {
    return Integer.toString(this.numerator) + "/" + Integer.toString(this.denominator);
  }
  
  // Ejercicio 2.d) Obtener resultado de la fracción
  /**
   * Método: calculateFraction
   * Propósito: Calcula el valor de la fracción.
   */
  float calculateFraction() {
    return (float) this.numerator / (float) this.denominator;
  }
  
  // Ejercicio 2.e) Multiplicar la fracción por un número
  /**
   * Método: multiplyNumber
   * Propósito: Multiplica la fracción por un número.
   * @param number Número entero a multiplicar por la fracción.
   */
  void multiplyNumber(int number) {
    this.numerator *= number;
  }
  
  //Ejercicio 2.f) Multiplicar, sumar y restar fracciones
  /**
   * Método: addFraction
   * Propósito: Suma fracciones.
   * @param fraction fracción que se sumará.
   */
  void addFraction(Fraction fraction) {
    int denom1;
    int denom2;
    
    // Si los denominadores son iguales, se suman solo los numeradores
    if (this.denominator == fraction.denominator) {
      this.numerator += fraction.numerator;
    } else {
      denom1 = this.denominator;
      denom2 = fraction.denominator;
      
      // Calcular el múltiplo común de los denominadores
      this.denominator *= denom2;
      fraction.denominator *= denom1;
      
      // Multiplicar los numeradores de igual forma
      this.numerator *= denom2;
      fraction.numerator *= denom1;
      
      // Finalmente, sumar las fracciones
      this.numerator += fraction.numerator;
    }
  }
  
  /**
   * Método: substractFraction
   * Propósito: Resta fracciones.
   * @param fraction fracción que se restará.
   */
  void substractFraction(Fraction fraction) {
    int denom1;
    int denom2;
    
    // Si los denominadores son iguales, se restan solo los numeradores
    if (this.denominator == fraction.denominator) {
      this.numerator -= fraction.numerator;
    } else {
      denom1 = this.denominator;
      denom2 = fraction.denominator;
      
      // Calcular el múltiplo común de los denominadores
      this.denominator *= denom2;
      fraction.denominator *= denom1;
      
      // Multiplicar los numeradores de igual forma
      this.numerator *= denom2;
      fraction.numerator *= denom1;
      
      // Finalmente, sumar las fracciones
      this.numerator -= fraction.numerator;
    }
  }
  
  /**
   * Método: multiplyFraction
   * Propósito: Multiplica fracciones.
   * @param fraction fracción que se multiplicará.
   */
  void multiplyFraction(Fraction fraction) {
    this.numerator *= fraction.numerator;
    this.denominator *= fraction.denominator;
  }
  
  // Ejercicio 2.g) Simplificar la fracción
  void simplifyFraction() {
    int i;
  }
}
